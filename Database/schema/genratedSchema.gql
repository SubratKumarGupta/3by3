#######################
# Input Schema
#######################

type Account {
	id: ID
	type: String
	provider: String @search(by: [hash])
	providerAccountId: String @search(by: [hash])
	refreshToken: String
	expires_at: Int64
	accessToken: String
	token_type: String
	refresh_token: String
	access_token: String
	scope: String
	id_token: String
	session_state: String
	user(filter: UserFilter): User @hasInverse(field: "accounts")
}

type Session @lambdaOnMutate(add: true, update: true, delete: true) {
	id: ID
	expires: DateTime
	sessionToken: String @search(by: [hash])
	user(filter: UserFilter): User @hasInverse(field: "sessions")
}

type User @lambdaOnMutate(add: true, update: true, delete: true) {
	id: ID
	createdAt: DateTime
	name: String @search(by: [fulltext,exact])
	email: String @search(by: [hash])
	emailVerified: DateTime
	image: String
	description: String
	posts(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post] @hasInverse(field: "user")
	accounts(filter: AccountFilter, order: AccountOrder, first: Int, offset: Int): [Account] @hasInverse(field: "user")
	sessions(filter: SessionFilter, order: SessionOrder, first: Int, offset: Int): [Session] @hasInverse(field: "user")
	createdCollections(filter: UserCratedCollectionFilter, order: UserCratedCollectionOrder, first: Int, offset: Int): [UserCratedCollection] @hasInverse(field: "user")
	postsAggregate(filter: PostFilter): PostAggregateResult
	accountsAggregate(filter: AccountFilter): AccountAggregateResult
	sessionsAggregate(filter: SessionFilter): SessionAggregateResult
	createdCollectionsAggregate(filter: UserCratedCollectionFilter): UserCratedCollectionAggregateResult
}

interface Collection {
	id: ID!
}

interface CollectionEntry {
	id: ID!
	img: String!
}

type UserCratedCollection implements Collection {
	id: ID!
	createdAt: DateTime
	name: String! @search(by: [fulltext])
	entry(filter: UserCratedCollectionEntryFilter, order: UserCratedCollectionEntryOrder, first: Int, offset: Int): [UserCratedCollectionEntry]! @hasInverse(field: "userCratedCollection")
	user(filter: UserFilter): User! @hasInverse(field: "createdCollections")
	entryAggregate(filter: UserCratedCollectionEntryFilter): UserCratedCollectionEntryAggregateResult
}

type UserCratedCollectionEntry implements CollectionEntry {
	id: ID!
	img: String!
	name: String!
	discription: String
	externelLink: String
	createdAt: DateTime
	userCratedCollection(filter: UserCratedCollectionFilter): UserCratedCollection! @hasInverse(field: "entry")
}

enum DefultCollectionNames {
	ANIME
	MANGA
	CHARACTER
}

type DefultCollection implements Collection @lambdaOnMutate(add: true, update: true, delete: true) {
	id: ID!
	name: String! @id
}

type DefultCollectionEntry implements CollectionEntry {
	id: ID!
	img: String!
	collection(filter: DefultCollectionFilter): DefultCollection!
	providersIdentifer: String!
}

union CollectionEntryUnion = DefultCollectionEntry | UserCratedCollectionEntry

union CollectionUnion = DefultCollection | UserCratedCollection

type Post {
	id: ID
	name: String! @search(by: [fulltext,exact])
	createdAt: DateTime
	description: String!
	entry1(filter: CollectionEntryUnionFilter): CollectionEntryUnion!
	entry2(filter: CollectionEntryUnionFilter): CollectionEntryUnion!
	entry3(filter: CollectionEntryUnionFilter): CollectionEntryUnion!
	entry4(filter: CollectionEntryUnionFilter): CollectionEntryUnion!
	entry5(filter: CollectionEntryUnionFilter): CollectionEntryUnion!
	entry6(filter: CollectionEntryUnionFilter): CollectionEntryUnion!
	entry7(filter: CollectionEntryUnionFilter): CollectionEntryUnion!
	entry8(filter: CollectionEntryUnionFilter): CollectionEntryUnion!
	entry9(filter: CollectionEntryUnionFilter): CollectionEntryUnion!
	collection(filter: CollectionUnionFilter): CollectionUnion!
	user(filter: UserFilter): User! @hasInverse(field: "posts")
}

type VerificationToken {
	id: ID
	identifier: String @search(by: [hash])
	token: String @search(by: [hash])
	expires: DateTime
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 mins 50.52 secs after the 23rd hour of Apr 12th 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	password: AuthRule
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete: AuthRule) on OBJECT | INTERFACE
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @remoteResponse(name: String) on FIELD_DEFINITION
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @lambdaOnMutate(add: Boolean, update: Boolean, delete: Boolean) on OBJECT | INTERFACE
directive @cacheControl(maxAge: Int!) on QUERY
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AccountAggregateResult {
	count: Int
	typeMin: String
	typeMax: String
	providerMin: String
	providerMax: String
	providerAccountIdMin: String
	providerAccountIdMax: String
	refreshTokenMin: String
	refreshTokenMax: String
	expires_atMin: Int64
	expires_atMax: Int64
	expires_atSum: Int64
	expires_atAvg: Float
	accessTokenMin: String
	accessTokenMax: String
	token_typeMin: String
	token_typeMax: String
	refresh_tokenMin: String
	refresh_tokenMax: String
	access_tokenMin: String
	access_tokenMax: String
	scopeMin: String
	scopeMax: String
	id_tokenMin: String
	id_tokenMax: String
	session_stateMin: String
	session_stateMax: String
}

type AddAccountPayload {
	account(filter: AccountFilter, order: AccountOrder, first: Int, offset: Int): [Account]
	numUids: Int
}

type AddDefultCollectionEntryPayload {
	defultCollectionEntry(filter: DefultCollectionEntryFilter, order: DefultCollectionEntryOrder, first: Int, offset: Int): [DefultCollectionEntry]
	numUids: Int
}

type AddDefultCollectionPayload {
	defultCollection(filter: DefultCollectionFilter, order: DefultCollectionOrder, first: Int, offset: Int): [DefultCollection]
	numUids: Int
}

type AddPostPayload {
	post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	numUids: Int
}

type AddSessionPayload {
	session(filter: SessionFilter, order: SessionOrder, first: Int, offset: Int): [Session]
	numUids: Int
}

type AddUserCratedCollectionEntryPayload {
	userCratedCollectionEntry(filter: UserCratedCollectionEntryFilter, order: UserCratedCollectionEntryOrder, first: Int, offset: Int): [UserCratedCollectionEntry]
	numUids: Int
}

type AddUserCratedCollectionPayload {
	userCratedCollection(filter: UserCratedCollectionFilter, order: UserCratedCollectionOrder, first: Int, offset: Int): [UserCratedCollection]
	numUids: Int
}

type AddUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	numUids: Int
}

type AddVerificationTokenPayload {
	verificationToken(filter: VerificationTokenFilter, order: VerificationTokenOrder, first: Int, offset: Int): [VerificationToken]
	numUids: Int
}

type CollectionAggregateResult {
	count: Int
}

type CollectionEntryAggregateResult {
	count: Int
	imgMin: String
	imgMax: String
}

type DefultCollectionAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type DefultCollectionEntryAggregateResult {
	count: Int
	imgMin: String
	imgMax: String
	providersIdentiferMin: String
	providersIdentiferMax: String
}

type DeleteAccountPayload {
	account(filter: AccountFilter, order: AccountOrder, first: Int, offset: Int): [Account]
	msg: String
	numUids: Int
}

type DeleteCollectionEntryPayload {
	collectionEntry(filter: CollectionEntryFilter, order: CollectionEntryOrder, first: Int, offset: Int): [CollectionEntry]
	msg: String
	numUids: Int
}

type DeleteCollectionPayload {
	collection(filter: CollectionFilter, first: Int, offset: Int): [Collection]
	msg: String
	numUids: Int
}

type DeleteDefultCollectionEntryPayload {
	defultCollectionEntry(filter: DefultCollectionEntryFilter, order: DefultCollectionEntryOrder, first: Int, offset: Int): [DefultCollectionEntry]
	msg: String
	numUids: Int
}

type DeleteDefultCollectionPayload {
	defultCollection(filter: DefultCollectionFilter, order: DefultCollectionOrder, first: Int, offset: Int): [DefultCollection]
	msg: String
	numUids: Int
}

type DeletePostPayload {
	post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	msg: String
	numUids: Int
}

type DeleteSessionPayload {
	session(filter: SessionFilter, order: SessionOrder, first: Int, offset: Int): [Session]
	msg: String
	numUids: Int
}

type DeleteUserCratedCollectionEntryPayload {
	userCratedCollectionEntry(filter: UserCratedCollectionEntryFilter, order: UserCratedCollectionEntryOrder, first: Int, offset: Int): [UserCratedCollectionEntry]
	msg: String
	numUids: Int
}

type DeleteUserCratedCollectionPayload {
	userCratedCollection(filter: UserCratedCollectionFilter, order: UserCratedCollectionOrder, first: Int, offset: Int): [UserCratedCollection]
	msg: String
	numUids: Int
}

type DeleteUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	msg: String
	numUids: Int
}

type DeleteVerificationTokenPayload {
	verificationToken(filter: VerificationTokenFilter, order: VerificationTokenOrder, first: Int, offset: Int): [VerificationToken]
	msg: String
	numUids: Int
}

type PostAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	createdAtMin: DateTime
	createdAtMax: DateTime
	descriptionMin: String
	descriptionMax: String
}

type SessionAggregateResult {
	count: Int
	expiresMin: DateTime
	expiresMax: DateTime
	sessionTokenMin: String
	sessionTokenMax: String
}

type UpdateAccountPayload {
	account(filter: AccountFilter, order: AccountOrder, first: Int, offset: Int): [Account]
	numUids: Int
}

type UpdateCollectionEntryPayload {
	collectionEntry(filter: CollectionEntryFilter, order: CollectionEntryOrder, first: Int, offset: Int): [CollectionEntry]
	numUids: Int
}

type UpdateDefultCollectionEntryPayload {
	defultCollectionEntry(filter: DefultCollectionEntryFilter, order: DefultCollectionEntryOrder, first: Int, offset: Int): [DefultCollectionEntry]
	numUids: Int
}

type UpdatePostPayload {
	post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	numUids: Int
}

type UpdateSessionPayload {
	session(filter: SessionFilter, order: SessionOrder, first: Int, offset: Int): [Session]
	numUids: Int
}

type UpdateUserCratedCollectionEntryPayload {
	userCratedCollectionEntry(filter: UserCratedCollectionEntryFilter, order: UserCratedCollectionEntryOrder, first: Int, offset: Int): [UserCratedCollectionEntry]
	numUids: Int
}

type UpdateUserCratedCollectionPayload {
	userCratedCollection(filter: UserCratedCollectionFilter, order: UserCratedCollectionOrder, first: Int, offset: Int): [UserCratedCollection]
	numUids: Int
}

type UpdateUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	numUids: Int
}

type UpdateVerificationTokenPayload {
	verificationToken(filter: VerificationTokenFilter, order: VerificationTokenOrder, first: Int, offset: Int): [VerificationToken]
	numUids: Int
}

type UserAggregateResult {
	count: Int
	createdAtMin: DateTime
	createdAtMax: DateTime
	nameMin: String
	nameMax: String
	emailMin: String
	emailMax: String
	emailVerifiedMin: DateTime
	emailVerifiedMax: DateTime
	imageMin: String
	imageMax: String
	descriptionMin: String
	descriptionMax: String
}

type UserCratedCollectionAggregateResult {
	count: Int
	createdAtMin: DateTime
	createdAtMax: DateTime
	nameMin: String
	nameMax: String
}

type UserCratedCollectionEntryAggregateResult {
	count: Int
	imgMin: String
	imgMax: String
	nameMin: String
	nameMax: String
	discriptionMin: String
	discriptionMax: String
	externelLinkMin: String
	externelLinkMax: String
	createdAtMin: DateTime
	createdAtMax: DateTime
}

type VerificationTokenAggregateResult {
	count: Int
	identifierMin: String
	identifierMax: String
	tokenMin: String
	tokenMax: String
	expiresMin: DateTime
	expiresMax: DateTime
}

#######################
# Generated Enums
#######################

enum AccountHasFilter {
	type
	provider
	providerAccountId
	refreshToken
	expires_at
	accessToken
	token_type
	refresh_token
	access_token
	scope
	id_token
	session_state
	user
}

enum AccountOrderable {
	type
	provider
	providerAccountId
	refreshToken
	expires_at
	accessToken
	token_type
	refresh_token
	access_token
	scope
	id_token
	session_state
}

enum CollectionEntryHasFilter {
	img
}

enum CollectionEntryOrderable {
	img
}

enum CollectionEntryUnionType {
	DefultCollectionEntry
	UserCratedCollectionEntry
}

enum CollectionUnionType {
	DefultCollection
	UserCratedCollection
}

enum DefultCollectionEntryHasFilter {
	img
	collection
	providersIdentifer
}

enum DefultCollectionEntryOrderable {
	img
	providersIdentifer
}

enum DefultCollectionHasFilter {
	name
}

enum DefultCollectionOrderable {
	name
}

enum PostHasFilter {
	name
	createdAt
	description
	entry1
	entry2
	entry3
	entry4
	entry5
	entry6
	entry7
	entry8
	entry9
	collection
	user
}

enum PostOrderable {
	name
	createdAt
	description
}

enum SessionHasFilter {
	expires
	sessionToken
	user
}

enum SessionOrderable {
	expires
	sessionToken
}

enum UserCratedCollectionEntryHasFilter {
	img
	name
	discription
	externelLink
	createdAt
	userCratedCollection
}

enum UserCratedCollectionEntryOrderable {
	img
	name
	discription
	externelLink
	createdAt
}

enum UserCratedCollectionHasFilter {
	createdAt
	name
	entry
	user
}

enum UserCratedCollectionOrderable {
	createdAt
	name
}

enum UserHasFilter {
	createdAt
	name
	email
	emailVerified
	image
	description
	posts
	accounts
	sessions
	createdCollections
}

enum UserOrderable {
	createdAt
	name
	email
	emailVerified
	image
	description
}

enum VerificationTokenHasFilter {
	identifier
	token
	expires
}

enum VerificationTokenOrderable {
	identifier
	token
	expires
}

#######################
# Generated Inputs
#######################

input AccountFilter {
	id: [ID!]
	provider: StringHashFilter
	providerAccountId: StringHashFilter
	has: [AccountHasFilter]
	and: [AccountFilter]
	or: [AccountFilter]
	not: AccountFilter
}

input AccountOrder {
	asc: AccountOrderable
	desc: AccountOrderable
	then: AccountOrder
}

input AccountPatch {
	type: String
	provider: String
	providerAccountId: String
	refreshToken: String
	expires_at: Int64
	accessToken: String
	token_type: String
	refresh_token: String
	access_token: String
	scope: String
	id_token: String
	session_state: String
	user: UserRef
}

input AccountRef {
	id: ID
	type: String
	provider: String
	providerAccountId: String
	refreshToken: String
	expires_at: Int64
	accessToken: String
	token_type: String
	refresh_token: String
	access_token: String
	scope: String
	id_token: String
	session_state: String
	user: UserRef
}

input AddAccountInput {
	type: String
	provider: String
	providerAccountId: String
	refreshToken: String
	expires_at: Int64
	accessToken: String
	token_type: String
	refresh_token: String
	access_token: String
	scope: String
	id_token: String
	session_state: String
	user: UserRef
}

input AddDefultCollectionEntryInput {
	img: String!
	collection: DefultCollectionRef!
	providersIdentifer: String!
}

input AddDefultCollectionInput {
	name: String!
}

input AddPostInput {
	name: String!
	createdAt: DateTime
	description: String!
	entry1: CollectionEntryUnionRef!
	entry2: CollectionEntryUnionRef!
	entry3: CollectionEntryUnionRef!
	entry4: CollectionEntryUnionRef!
	entry5: CollectionEntryUnionRef!
	entry6: CollectionEntryUnionRef!
	entry7: CollectionEntryUnionRef!
	entry8: CollectionEntryUnionRef!
	entry9: CollectionEntryUnionRef!
	collection: CollectionUnionRef!
	user: UserRef!
}

input AddSessionInput {
	expires: DateTime
	sessionToken: String
	user: UserRef
}

input AddUserCratedCollectionEntryInput {
	img: String!
	name: String!
	discription: String
	externelLink: String
	createdAt: DateTime
	userCratedCollection: UserCratedCollectionRef!
}

input AddUserCratedCollectionInput {
	createdAt: DateTime
	name: String!
	entry: [UserCratedCollectionEntryRef]!
	user: UserRef!
}

input AddUserInput {
	createdAt: DateTime
	name: String
	email: String
	emailVerified: DateTime
	image: String
	description: String
	posts: [PostRef]
	accounts: [AccountRef]
	sessions: [SessionRef]
	createdCollections: [UserCratedCollectionRef]
}

input AddVerificationTokenInput {
	identifier: String
	token: String
	expires: DateTime
}

input CollectionEntryFilter {
	id: [ID!]
	has: [CollectionEntryHasFilter]
	and: [CollectionEntryFilter]
	or: [CollectionEntryFilter]
	not: CollectionEntryFilter
}

input CollectionEntryOrder {
	asc: CollectionEntryOrderable
	desc: CollectionEntryOrderable
	then: CollectionEntryOrder
}

input CollectionEntryPatch {
	img: String
}

input CollectionEntryRef {
	id: ID!
}

input CollectionEntryUnionFilter {
	memberTypes: [CollectionEntryUnionType!]
	defultCollectionEntryFilter: DefultCollectionEntryFilter
	userCratedCollectionEntryFilter: UserCratedCollectionEntryFilter
}

input CollectionEntryUnionRef {
	defultCollectionEntryRef: DefultCollectionEntryRef
	userCratedCollectionEntryRef: UserCratedCollectionEntryRef
}

input CollectionFilter {
	id: [ID!]
	not: CollectionFilter
}

input CollectionRef {
	id: ID!
}

input CollectionUnionFilter {
	memberTypes: [CollectionUnionType!]
	defultCollectionFilter: DefultCollectionFilter
	userCratedCollectionFilter: UserCratedCollectionFilter
}

input CollectionUnionRef {
	defultCollectionRef: DefultCollectionRef
	userCratedCollectionRef: UserCratedCollectionRef
}

input DefultCollectionEntryFilter {
	id: [ID!]
	has: [DefultCollectionEntryHasFilter]
	and: [DefultCollectionEntryFilter]
	or: [DefultCollectionEntryFilter]
	not: DefultCollectionEntryFilter
}

input DefultCollectionEntryOrder {
	asc: DefultCollectionEntryOrderable
	desc: DefultCollectionEntryOrderable
	then: DefultCollectionEntryOrder
}

input DefultCollectionEntryPatch {
	img: String
	collection: DefultCollectionRef
	providersIdentifer: String
}

input DefultCollectionEntryRef {
	id: ID
	img: String
	collection: DefultCollectionRef
	providersIdentifer: String
}

input DefultCollectionFilter {
	id: [ID!]
	name: StringHashFilter
	has: [DefultCollectionHasFilter]
	and: [DefultCollectionFilter]
	or: [DefultCollectionFilter]
	not: DefultCollectionFilter
}

input DefultCollectionOrder {
	asc: DefultCollectionOrderable
	desc: DefultCollectionOrderable
	then: DefultCollectionOrder
}

input DefultCollectionRef {
	id: ID
	name: String
}

input PostFilter {
	id: [ID!]
	name: StringExactFilter_StringFullTextFilter
	has: [PostHasFilter]
	and: [PostFilter]
	or: [PostFilter]
	not: PostFilter
}

input PostOrder {
	asc: PostOrderable
	desc: PostOrderable
	then: PostOrder
}

input PostPatch {
	name: String
	createdAt: DateTime
	description: String
	entry1: CollectionEntryUnionRef
	entry2: CollectionEntryUnionRef
	entry3: CollectionEntryUnionRef
	entry4: CollectionEntryUnionRef
	entry5: CollectionEntryUnionRef
	entry6: CollectionEntryUnionRef
	entry7: CollectionEntryUnionRef
	entry8: CollectionEntryUnionRef
	entry9: CollectionEntryUnionRef
	collection: CollectionUnionRef
	user: UserRef
}

input PostRef {
	id: ID
	name: String
	createdAt: DateTime
	description: String
	entry1: CollectionEntryUnionRef
	entry2: CollectionEntryUnionRef
	entry3: CollectionEntryUnionRef
	entry4: CollectionEntryUnionRef
	entry5: CollectionEntryUnionRef
	entry6: CollectionEntryUnionRef
	entry7: CollectionEntryUnionRef
	entry8: CollectionEntryUnionRef
	entry9: CollectionEntryUnionRef
	collection: CollectionUnionRef
	user: UserRef
}

input SessionFilter {
	id: [ID!]
	sessionToken: StringHashFilter
	has: [SessionHasFilter]
	and: [SessionFilter]
	or: [SessionFilter]
	not: SessionFilter
}

input SessionOrder {
	asc: SessionOrderable
	desc: SessionOrderable
	then: SessionOrder
}

input SessionPatch {
	expires: DateTime
	sessionToken: String
	user: UserRef
}

input SessionRef {
	id: ID
	expires: DateTime
	sessionToken: String
	user: UserRef
}

input StringExactFilter_StringFullTextFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
	alloftext: String
	anyoftext: String
}

input UpdateAccountInput {
	filter: AccountFilter!
	set: AccountPatch
	remove: AccountPatch
}

input UpdateCollectionEntryInput {
	filter: CollectionEntryFilter!
	set: CollectionEntryPatch
	remove: CollectionEntryPatch
}

input UpdateDefultCollectionEntryInput {
	filter: DefultCollectionEntryFilter!
	set: DefultCollectionEntryPatch
	remove: DefultCollectionEntryPatch
}

input UpdatePostInput {
	filter: PostFilter!
	set: PostPatch
	remove: PostPatch
}

input UpdateSessionInput {
	filter: SessionFilter!
	set: SessionPatch
	remove: SessionPatch
}

input UpdateUserCratedCollectionEntryInput {
	filter: UserCratedCollectionEntryFilter!
	set: UserCratedCollectionEntryPatch
	remove: UserCratedCollectionEntryPatch
}

input UpdateUserCratedCollectionInput {
	filter: UserCratedCollectionFilter!
	set: UserCratedCollectionPatch
	remove: UserCratedCollectionPatch
}

input UpdateUserInput {
	filter: UserFilter!
	set: UserPatch
	remove: UserPatch
}

input UpdateVerificationTokenInput {
	filter: VerificationTokenFilter!
	set: VerificationTokenPatch
	remove: VerificationTokenPatch
}

input UserCratedCollectionEntryFilter {
	id: [ID!]
	has: [UserCratedCollectionEntryHasFilter]
	and: [UserCratedCollectionEntryFilter]
	or: [UserCratedCollectionEntryFilter]
	not: UserCratedCollectionEntryFilter
}

input UserCratedCollectionEntryOrder {
	asc: UserCratedCollectionEntryOrderable
	desc: UserCratedCollectionEntryOrderable
	then: UserCratedCollectionEntryOrder
}

input UserCratedCollectionEntryPatch {
	img: String
	name: String
	discription: String
	externelLink: String
	createdAt: DateTime
	userCratedCollection: UserCratedCollectionRef
}

input UserCratedCollectionEntryRef {
	id: ID
	img: String
	name: String
	discription: String
	externelLink: String
	createdAt: DateTime
	userCratedCollection: UserCratedCollectionRef
}

input UserCratedCollectionFilter {
	id: [ID!]
	name: StringFullTextFilter
	has: [UserCratedCollectionHasFilter]
	and: [UserCratedCollectionFilter]
	or: [UserCratedCollectionFilter]
	not: UserCratedCollectionFilter
}

input UserCratedCollectionOrder {
	asc: UserCratedCollectionOrderable
	desc: UserCratedCollectionOrderable
	then: UserCratedCollectionOrder
}

input UserCratedCollectionPatch {
	createdAt: DateTime
	name: String
	entry: [UserCratedCollectionEntryRef]
	user: UserRef
}

input UserCratedCollectionRef {
	id: ID
	createdAt: DateTime
	name: String
	entry: [UserCratedCollectionEntryRef]
	user: UserRef
}

input UserFilter {
	id: [ID!]
	name: StringExactFilter_StringFullTextFilter
	email: StringHashFilter
	has: [UserHasFilter]
	and: [UserFilter]
	or: [UserFilter]
	not: UserFilter
}

input UserOrder {
	asc: UserOrderable
	desc: UserOrderable
	then: UserOrder
}

input UserPatch {
	createdAt: DateTime
	name: String
	email: String
	emailVerified: DateTime
	image: String
	description: String
	posts: [PostRef]
	accounts: [AccountRef]
	sessions: [SessionRef]
	createdCollections: [UserCratedCollectionRef]
}

input UserRef {
	id: ID
	createdAt: DateTime
	name: String
	email: String
	emailVerified: DateTime
	image: String
	description: String
	posts: [PostRef]
	accounts: [AccountRef]
	sessions: [SessionRef]
	createdCollections: [UserCratedCollectionRef]
}

input VerificationTokenFilter {
	id: [ID!]
	identifier: StringHashFilter
	token: StringHashFilter
	has: [VerificationTokenHasFilter]
	and: [VerificationTokenFilter]
	or: [VerificationTokenFilter]
	not: VerificationTokenFilter
}

input VerificationTokenOrder {
	asc: VerificationTokenOrderable
	desc: VerificationTokenOrderable
	then: VerificationTokenOrder
}

input VerificationTokenPatch {
	identifier: String
	token: String
	expires: DateTime
}

input VerificationTokenRef {
	id: ID
	identifier: String
	token: String
	expires: DateTime
}

#######################
# Generated Query
#######################

type Query {
	getAccount(id: ID!): Account
	queryAccount(filter: AccountFilter, order: AccountOrder, first: Int, offset: Int): [Account]
	aggregateAccount(filter: AccountFilter): AccountAggregateResult
	getSession(id: ID!): Session
	querySession(filter: SessionFilter, order: SessionOrder, first: Int, offset: Int): [Session]
	aggregateSession(filter: SessionFilter): SessionAggregateResult
	getUser(id: ID!): User
	queryUser(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	aggregateUser(filter: UserFilter): UserAggregateResult
	getCollection(id: ID!): Collection
	queryCollection(filter: CollectionFilter, first: Int, offset: Int): [Collection]
	aggregateCollection(filter: CollectionFilter): CollectionAggregateResult
	getCollectionEntry(id: ID!): CollectionEntry
	queryCollectionEntry(filter: CollectionEntryFilter, order: CollectionEntryOrder, first: Int, offset: Int): [CollectionEntry]
	aggregateCollectionEntry(filter: CollectionEntryFilter): CollectionEntryAggregateResult
	getUserCratedCollection(id: ID!): UserCratedCollection
	queryUserCratedCollection(filter: UserCratedCollectionFilter, order: UserCratedCollectionOrder, first: Int, offset: Int): [UserCratedCollection]
	aggregateUserCratedCollection(filter: UserCratedCollectionFilter): UserCratedCollectionAggregateResult
	getUserCratedCollectionEntry(id: ID!): UserCratedCollectionEntry
	queryUserCratedCollectionEntry(filter: UserCratedCollectionEntryFilter, order: UserCratedCollectionEntryOrder, first: Int, offset: Int): [UserCratedCollectionEntry]
	aggregateUserCratedCollectionEntry(filter: UserCratedCollectionEntryFilter): UserCratedCollectionEntryAggregateResult
	getDefultCollection(id: ID, name: String): DefultCollection
	queryDefultCollection(filter: DefultCollectionFilter, order: DefultCollectionOrder, first: Int, offset: Int): [DefultCollection]
	aggregateDefultCollection(filter: DefultCollectionFilter): DefultCollectionAggregateResult
	getDefultCollectionEntry(id: ID!): DefultCollectionEntry
	queryDefultCollectionEntry(filter: DefultCollectionEntryFilter, order: DefultCollectionEntryOrder, first: Int, offset: Int): [DefultCollectionEntry]
	aggregateDefultCollectionEntry(filter: DefultCollectionEntryFilter): DefultCollectionEntryAggregateResult
	getPost(id: ID!): Post
	queryPost(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	aggregatePost(filter: PostFilter): PostAggregateResult
	getVerificationToken(id: ID!): VerificationToken
	queryVerificationToken(filter: VerificationTokenFilter, order: VerificationTokenOrder, first: Int, offset: Int): [VerificationToken]
	aggregateVerificationToken(filter: VerificationTokenFilter): VerificationTokenAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	addAccount(input: [AddAccountInput!]!): AddAccountPayload
	updateAccount(input: UpdateAccountInput!): UpdateAccountPayload
	deleteAccount(filter: AccountFilter!): DeleteAccountPayload
	addSession(input: [AddSessionInput!]!): AddSessionPayload
	updateSession(input: UpdateSessionInput!): UpdateSessionPayload
	deleteSession(filter: SessionFilter!): DeleteSessionPayload
	addUser(input: [AddUserInput!]!): AddUserPayload
	updateUser(input: UpdateUserInput!): UpdateUserPayload
	deleteUser(filter: UserFilter!): DeleteUserPayload
	deleteCollection(filter: CollectionFilter!): DeleteCollectionPayload
	updateCollectionEntry(input: UpdateCollectionEntryInput!): UpdateCollectionEntryPayload
	deleteCollectionEntry(filter: CollectionEntryFilter!): DeleteCollectionEntryPayload
	addUserCratedCollection(input: [AddUserCratedCollectionInput!]!): AddUserCratedCollectionPayload
	updateUserCratedCollection(input: UpdateUserCratedCollectionInput!): UpdateUserCratedCollectionPayload
	deleteUserCratedCollection(filter: UserCratedCollectionFilter!): DeleteUserCratedCollectionPayload
	addUserCratedCollectionEntry(input: [AddUserCratedCollectionEntryInput!]!): AddUserCratedCollectionEntryPayload
	updateUserCratedCollectionEntry(input: UpdateUserCratedCollectionEntryInput!): UpdateUserCratedCollectionEntryPayload
	deleteUserCratedCollectionEntry(filter: UserCratedCollectionEntryFilter!): DeleteUserCratedCollectionEntryPayload
	addDefultCollection(input: [AddDefultCollectionInput!]!, upsert: Boolean): AddDefultCollectionPayload
	deleteDefultCollection(filter: DefultCollectionFilter!): DeleteDefultCollectionPayload
	addDefultCollectionEntry(input: [AddDefultCollectionEntryInput!]!): AddDefultCollectionEntryPayload
	updateDefultCollectionEntry(input: UpdateDefultCollectionEntryInput!): UpdateDefultCollectionEntryPayload
	deleteDefultCollectionEntry(filter: DefultCollectionEntryFilter!): DeleteDefultCollectionEntryPayload
	addPost(input: [AddPostInput!]!): AddPostPayload
	updatePost(input: UpdatePostInput!): UpdatePostPayload
	deletePost(filter: PostFilter!): DeletePostPayload
	addVerificationToken(input: [AddVerificationTokenInput!]!): AddVerificationTokenPayload
	updateVerificationToken(input: UpdateVerificationTokenInput!): UpdateVerificationTokenPayload
	deleteVerificationToken(filter: VerificationTokenFilter!): DeleteVerificationTokenPayload
}