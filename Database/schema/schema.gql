type Account {
  id: ID
  type: String
  provider: String @search(by: [hash])
  providerAccountId: String @search(by: [hash])
  refreshToken: String
  expires_at: Int64
  accessToken: String
  token_type: String
  refresh_token: String
  access_token: String
  scope: String
  id_token: String
  session_state: String
  user: User @hasInverse(field: "accounts")
}
type Session @lambdaOnMutate(add: true, update: true, delete: true) {
  id: ID
  expires: DateTime
  sessionToken: String @search(by: [hash])
  user: User @hasInverse(field: "sessions")
}

type User @lambdaOnMutate(add: true, update: true, delete: true) {
  id: ID
  createdAt: DateTime
  name: String @search(by: [fulltext, exact])
  email: String @search(by: [hash])
  emailVerified: DateTime
  image: String
  description: String
  posts: [Post] @hasInverse(field: "user")
  accounts: [Account] @hasInverse(field: "user")
  sessions: [Session] @hasInverse(field: "user")
  createdCollections: [UserCratedCollection] @hasInverse(field: "user")
}

# ...---------Collection----------- ... #
interface Collection {
  id: ID!
}
interface CollectionEntry {
  id: ID!
  img: String!
}

# ...______User Created______
type UserCratedCollection implements Collection {
  createdAt: DateTime
  name: String! @search(by: [fulltext])
  entry: [UserCratedCollectionEntry]! @hasInverse(field: "userCratedCollection")
  user: User! @hasInverse(field: "createdCollections")
}

type UserCratedCollectionEntry implements CollectionEntry {
  name: String!
  discription: String
  externelLink: String
  createdAt: DateTime
  userCratedCollection: UserCratedCollection! @hasInverse(field: "entry")
}

# ...______defualt______
enum DefultCollectionNames {
  ANIME
  MANGA
  CHARACTER
}
type DefultCollection implements Collection
  @lambdaOnMutate(add: true, update: true, delete: true) {
  name: String! @id
  # ... later crete it on lamda mutai
}
type DefultCollectionEntry implements CollectionEntry {
  collection: DefultCollection!
  providersIdentifer: String!
}

union CollectionEntryUnion = DefultCollectionEntry | UserCratedCollectionEntry
union CollectionUnion = DefultCollection | UserCratedCollection
type Post {
  id: ID
  name: String! @search(by: [fulltext, exact])
  createdAt: DateTime
  description: String!
  entrys: [CollectionEntryUnion!]
  collection: CollectionUnion!
  user: User! @hasInverse(field: "posts")
}

type VerificationToken {
  id: ID
  identifier: String @search(by: [hash])
  token: String @search(by: [hash])
  expires: DateTime
}
